type Block = record {
  transaction : Transaction;
  timestamp : Timestamp;
  parent_hash : opt blob;
};
type DonationData = record {
  timestamp : Timestamp;
  amount : Tokens;
  donor : principal;
};
type FundraiseData = record {
  goal : nat64;
  description : text;
  campaign_title : text;
  category : text;
  image : text;
  location : text;
};
type FundraiseDataWithId = record {
  id : principal;
  fundraise_data : FundraiseData;
};
type Operation = variant {
  Approve : record {
    fee : Tokens;
    from : blob;
    expires_at : opt Timestamp;
    spender : blob;
  };
  Burn : record { from : blob; amount : Tokens };
  Mint : record { to : blob; amount : Tokens };
  Transfer : record { to : blob; fee : Tokens; from : blob; amount : Tokens };
  TransferFrom : record {
    to : blob;
    fee : Tokens;
    from : blob;
    amount : Tokens;
    spender : blob;
  };
};
type RejectionCode = variant {
  NoError;
  CanisterError;
  SysTransient;
  DestinationInvalid;
  Unknown;
  SysFatal;
  CanisterReject;
};
type Result = variant { Ok : text; Err : text };
type Result_1 = variant { Ok : nat; Err : text };
type Result_2 = variant { Ok : vec FundraiseDataWithId; Err : text };
type Result_3 = variant { Ok : vec DonationData; Err : text };
type Result_4 = variant { Ok : nat64; Err : text };
type Result_5 = variant { Ok : FundraiseData; Err : text };
type Result_6 = variant {
  Ok : vec Block;
  Err : record { RejectionCode; text };
};
type Timestamp = record { timestamp_nanos : nat64 };
type Tokens = record { e8s : nat64 };
type Transaction = record {
  memo : nat64;
  icrc1_memo : opt blob;
  operation : opt Operation;
  created_at_time : Timestamp;
};
service : {
  create_fundraise : (principal, FundraiseData) -> (Result);
  donate : (principal, Tokens) -> (Result_1);
  get_bulk_fundraise_data : (nat64) -> (Result_2) query;
  get_donation_list : (principal) -> (Result_3) query;
  get_donation_list_len : (principal) -> (Result_4) query;
  get_fundraise_data_by_principal_id : (principal) -> (Result_5) query;
  query_one_block : (principal, principal, nat64) -> (Result_6);
}
